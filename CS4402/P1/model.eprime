language ESSENCE' 1.0

given nrows : int(1..)
given ncols : int(1..)

given nrobots : int(1..)
given robot_pos : matrix indexed by [int(1..nrobots), int(1,2)] of int(1..)

given ntasks : int(1..)
given task_obj : matrix indexed by [int(1..ntasks)] of int(1..)
given task_dest : matrix indexed by [int(1..ntasks), int(1,2)] of int(1..)

given time_limit : int(1..)

given map : matrix indexed by [int(1..nrows), int(1..ncols)] of int(-1..)

find allRobotMoves : matrix indexed by [int(1..nrobots), int(1..time_limit + 1), int(1,2)] of int(1..max(nrows, ncols))
$ list of moves for each robot where the list length cannot exceed the time_limit and move is [row, col], starts with initial robot pos in it

find invContents : matrix indexed by [int(1..nrobots), int(1..time_limit + 1)] of int(0..ntasks)
$ 0 representing empty inventory and 1..ntasks representing the current object held.
$ inventory contents of each robot at each timestep, corrosponding with move number.
$ taken together, allRobotMoves and invContents describes the state of where the robot moves, and what its got in its inventory at any point

find successes : matrix indexed by [int(1..ntasks), int(1..time_limit + 1)] of bool

branching on [allRobotMoves]





such that

$ robot should start at robot pos
$ !! Do i actually need this, or do i encode it with moves?
$ !! maybe start pos is first move?
$ !! moves array length is time limit + 1 and start with robot pos.
$ TODO :: find a better way to do this

$ Robots all start at their start position.
forAll robot : int(1..nrobots) . allRobotMoves[robot, 1, 1] = robot_pos[robot, 1],
forAll robot : int(1..nrobots) . allRobotMoves[robot, 1, 2] = robot_pos[robot, 2],


$ start with no tasks completed, and end with all tasks completed
forAll task : int(1..ntasks) . successes[task, 1] = false,
forAll task : int(1..ntasks) . successes[task, time_limit + 1] = true,

$ inventory should start empty
forAll robot : int(1..nrobots) . invContents[robot, 1] = 0,

$   Robots can only move by 1 space in each of the cardinal directions.
$   Prior space and current space can vary by no more than 1 in each of the 4 possible directions from one move to the next
$   For all robots, check that the current move is within this 1 move constraint from the prior one
forAll robot : int(1..nrobots) .
    forAll move : int(2..time_limit + 1) . $ robots should check given initial move, so start from move 2 (ie initial move is given)
        $ robot should move by at most 1 space in either x or y directions
        $ (|allRobotMoves[robot, move - 1, 1] - allRobotMoves[robot, move, 1]| +
        $ |allRobotMoves[robot, move - 1, 2] - allRobotMoves[robot, move, 2]|) <= 1,
        |allRobotMoves[robot, move - 1, 1] - allRobotMoves[robot, move, 1]| = 0 /\
        |allRobotMoves[robot, move - 1, 2] - allRobotMoves[robot, move, 2]| <= 1,

$ when a robot is in the same space as a task obj, add it to inventory if not full
forAll task : int(1..ntasks) .
    forAll robot : int(1..nrobots) .
        forAll move : int(1..time_limit + 1) . $  start at 1 as although robots start with empty inventory, it may start on an object pile
            $ forAll obj : int(1..ntasks) .
                (map[allRobotMoves[robot, move, 1], allRobotMoves[robot, move, 2]] = task_obj[task] /\ invContents[robot, move] = 0) ->
                    invContents[robot, move] = task_obj[task],

$ inventory should persist across moves, unless obj_dest is reached
forAll task : int(1..ntasks) .
    forAll robot : int(1..nrobots) .
        forAll move : int(2..time_limit + 1) .
            (((task_dest[task, 1] = allRobotMoves[robot, move, 1]) /\ (task_dest[task, 2] = allRobotMoves[robot, move, 2])) /\ invContents[robot, move] = task_obj[task]) /\
                (invContents[robot, move] = 0 /\ successes[task, move] = true),

        $ atleast(allRobotMoves[robot, ..], task_dest[task, ..], [i | i : int(0..time_limit + 1), i = 1]),


$ robot should be at the destination with corrosponding task_obj in inventory at some point
forAll task : int(1..ntasks) .
forAll robot : int(1..nrobots) .
    exists move : int(1..time_limit + 1) .
        successes[task, move] = (allRobotMoves[robot, move, 1] = task_dest[1, 1]) /\
        allRobotMoves[robot, move, 2] = task_dest[1, 2] /\
        invContents[robot, move] = task_obj[1],



$ robot cannot move into cell containing -1

true